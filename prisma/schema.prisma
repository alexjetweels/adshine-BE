// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                  BigInt                @id @default(autoincrement())
  name                String                @db.VarChar(255)
  email               String                @db.VarChar(255)
  photoUrl            String?               @db.VarChar(255)
  password            String                @db.VarChar(255) // Mã hash của mật khẩu
  isBan               Boolean               @default(false)
  role                Role                  @default(USER)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Order               Order[]
  UserPermissionGroup UserPermissionGroup[]
  UserGroup           UserGroup[]

  @@index([email])
  @@map("users")
}

enum ValueType {
  NUMBER
  STRING
  BOOLEAN
}

model Config {
  key       String    @id @db.VarChar(255)
  valueType ValueType
  value     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("configs")
}

enum StatusLogAction {
  INACTIVE
  ACTIVE
}

model LogAction {
  id        BigInt          @id @default(autoincrement())
  url       String          @db.Text
  method    String          @db.VarChar(10)
  body      String          @db.Text
  ip        String          @db.VarChar(45)
  query     String          @db.Text
  now       DateTime        @default(now())
  data      String          @db.Text
  timeCall  Int
  status    StatusLogAction
  userId    BigInt?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("log_actions")
}

enum StatusProduct {
  INACTIVE
  ACTIVE
}

model Product {
  id          BigInt        @id @default(autoincrement())
  category    String        @unique @db.VarChar(255)
  name        String?       @db.VarChar(255)
  description String?       @db.Text
  price       BigInt?       @default(0)
  stock       BigInt?       @default(0)
  status      StatusProduct @default(ACTIVE)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@map("products")
}

enum StatusOrder {
  INACTIVE
  ACTIVE
}

model Order {
  id          BigInt      @id @default(autoincrement())
  userId      BigInt      @db.BigInt
  totalPrice  BigInt      @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      StatusOrder @default(ACTIVE)
  description String?     @db.Text

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  orderId   BigInt @db.BigInt
  productId BigInt @db.BigInt
  quantity  Int    @default(1)
  price     BigInt @default(0)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId])
  @@map("order_items")
}

enum NotificationType {
  ALL_USER
}

enum NotificationStatus {
  HIDE
  SHOW
}

model Notification {
  id        String             @id @default(uuid())
  title     String?            @db.VarChar(255)
  content   String             @db.Text
  type      NotificationType   @default(ALL_USER)
  status    NotificationStatus @default(SHOW)
  iconType  String?            @db.VarChar(50)
  iconUrl   String?            @db.VarChar(255)
  createBy  BigInt             @db.BigInt
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@map("notifications")
}

model Permission {
  id          String   @id
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  groupDetails PermissionGroupDetail[]

  @@map("permissions")
}

enum StatusPermissionGroup {
  ACTIVE
  INACTIVE
}

model PermissionGroup {
  id          String                @id @default(uuid())
  name        String                @db.VarChar(255)
  createBy    BigInt                @db.BigInt
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  status      StatusPermissionGroup @default(ACTIVE)
  description String?               @db.Text

  permissions PermissionGroupDetail[]
  userGroups  UserPermissionGroup[]

  @@map("permission_groups")
}

model PermissionGroupDetail {
  permissionGroupId String
  permissionId      String

  permissionGroup PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)
  permission      Permission      @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([permissionGroupId, permissionId])
  @@map("permission_group_details")
}

model UserPermissionGroup {
  userId            BigInt
  permissionGroupId String
  createBy          BigInt   @db.BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionGroup PermissionGroup @relation(fields: [permissionGroupId], references: [id], onDelete: Cascade)

  @@id([userId, permissionGroupId])
  @@map("user_permission_groups")
}

enum GroupRole {
  MANAGER
  LEADER
  STAFF
}

enum StatusGroup {
  ACTIVE
  INACTIVE
}

model Group {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(255)
  description String?     @db.Text
  status      StatusGroup @default(ACTIVE)
  createBy    BigInt      @db.BigInt
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  users UserGroup[]

  @@map("groups")
}

enum StatusUserGroup {
  ACTIVE
  INACTIVE
}

model UserGroup {
  userId   BigInt
  groupId  String
  status   StatusUserGroup @default(ACTIVE)
  role     GroupRole       @default(STAFF)
  createBy BigInt          @db.BigInt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
  @@map("user_groups")
}
